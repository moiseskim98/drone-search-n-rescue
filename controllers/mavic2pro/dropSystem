/*
 * Copyright 1996-2023 Cyberbotics Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Description:  Simplistic drone control:
 * - Stabilize the robot using the embedded sensors.
 * - Use PID technique to stabilize the drone roll/pitch/yaw.
 * - Use a cubic function applied on the vertical difference to stabilize the robot vertically.
 * - Stabilize the camera.
 * - Control the robot using the computer keyboard.
 */

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include <webots/robot.h>

#include <webots/camera.h>
#include <webots/compass.h>
#include <webots/gps.h>
#include <webots/gyro.h>
#include <webots/inertial_unit.h>
#include <webots/keyboard.h>
#include <webots/led.h>
#include <webots/motor.h>

#define SIGN(x) ((x) > 0) - ((x) < 0)
#define CLAMP(value, low, high) ((value) < (low) ? (low) : ((value) > (high) ? (high) : (value)))

int main(int argc, char **argv) {
  wb_robot_init();
  int timestep = (int)wb_robot_get_basic_time_step();
  wb_keyboard_enable(timestep);
  WbDeviceTag camera_pitch_motor = wb_robot_get_device("latch");
  // WbDeviceTag camera_yaw_motor = wb_robot_get_device("camera yaw");  // Not used in this example.


  // Wait one second.
  while (wb_robot_step(timestep) != -1) {
    if (wb_robot_get_time() > 1.0)
      break;
  }

  // Display manual control message.
  printf("- 'a': open latch.\n");
  printf("- 'b': close latch.\n");

  // Constants, empirically found.
  
  // Variables.
  double latch_position = 0;

  // Main loop
  while (wb_robot_step(timestep) != -1) {
    const double time = wb_robot_get_time();  // in seconds.

    // Retrieve robot position using the sensors.
    //const double roll = wb_inertial_unit_get_roll_pitch_yaw(imu)[0];

    
    // Stabilize the Camera by actuating the camera motors according to the gyro feedback.
    wb_motor_set_position(latch_motor, latch_position);

    // Transform the keyboard input to disturbances on the stabilization algorithm.
    int key = wb_keyboard_get_key();
    while (key > 0) {
      switch (key) {
        case ('a'):
          latch_position = 0.5;
          printf("releasing...");
          break;
        case ('b'):
          latch_position = 0.0;
          printf("closing...");
          break;
      }
      key = wb_keyboard_get_key();
    }

   
  };

  wb_robot_cleanup();

  return EXIT_SUCCESS;
}
